"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Search, Pill, AlertCircle, Clock, MapPin, ArrowRight } from "lucide-react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import type { MedicineInfo } from "@/types/medicine"
import LoadingSpinner from "@/components/loading-spinner"
import { useScript } from "@/hooks/use-script"
import { useLanguage } from "@/contexts/language-context"
import { getCurrentUser, getSearchHistory, saveSearchHistory } from "@/lib/supabase"

declare global {
  interface Window {
    AgentAI: any
  }
}

export default function MedicineSearchContent() {
  const router = useRouter()
  const { t } = useLanguage()
  const [searchQuery, setSearchQuery] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [medicineInfo, setMedicineInfo] = useState<MedicineInfo | null>(null)
  const [searchHistory, setSearchHistory] = useState<string[]>([])
  const [error, setError] = useState<string | null>(null)
  const [agent, setAgent] = useState<any>(null)
  const [locationInput, setLocationInput] = useState("")
  const [isLocationSubmitting, setIsLocationSubmitting] = useState(false)
  const [userId, setUserId] = useState<string | null>(null)

  const agentAiStatus = useScript("https://cdn.agentai.com/sdk/v1/agentai.min.js")

  // Initialize agent and fetch user data
  useEffect(() => {
    const initializeAgent = async () => {
      if (agentAiStatus === "ready" && typeof window !== "undefined" && window.AgentAI) {
        try {
          const newAgent = new window.AgentAI("YOUR_AGENT_ID")
          setAgent(newAgent)
        } catch (error) {
          console.error("Failed to initialize agent:", error instanceof Error ? error.message : String(error))
        }
      }
    }

    const fetchUserData = async () => {
      try {
        // Get user ID from localStorage or from Supabase session
        const storedUserId = localStorage.getItem("userId")

        if (storedUserId) {
          setUserId(storedUserId)

          // Fetch search history from Supabase
          const historyData = await getSearchHistory(storedUserId, "medicine")
          if (historyData && historyData.length > 0) {
            setSearchHistory(historyData.map((item) => item.query))
          }
        } else {
          // Try to get current user from Supabase session
          const user = await getCurrentUser()
          if (user) {
            setUserId(user.id)
            localStorage.setItem("userId", user.id)
            localStorage.setItem("isLoggedIn", "true")

            // Fetch search history
            const historyData = await getSearchHistory(user.id, "medicine")
            if (historyData && historyData.length > 0) {
              setSearchHistory(historyData.map((item) => item.query))
            }
          }
        }
      } catch (error) {
        console.error("Error fetching user data:", error instanceof Error ? error.message : String(error))
      }
    }

    initializeAgent()
    fetchUserData()
  }, [agentAiStatus])

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!searchQuery.trim() || !agent) return

    setIsLoading(true)
    setError(null)

    try {
      const result = await agent.query({
        messages: [
          { role: "system", content: "You are a helpful assistant that provides information about medicines." },
          { role: "user", content: `Provide detailed information about the medicine: ${searchQuery}` },
        ],
      })

      // Parse the result and create a MedicineInfo object
      // This is a placeholder. In reality, you would parse the actual response
      const medicineData: MedicineInfo = {
        name: searchQuery,
        category: "Medication",
        description: result.content,
        usage: "Take as directed by your physician.",
        sideEffects: ["Nausea", "Headache", "Dizziness"],
        precautions: ["Avoid alcohol", "Do not drive if feeling drowsy"],
        benefits: "Helps manage symptoms and improve quality of life.",
        monitoring: "Regular blood tests may be required.",
        medicalHistory: "Inform your doctor about any pre-existing conditions.",
        inhibitorTesting: "May be required before starting treatment.",
        agesDosage: "Adults: Standard dose. Children: Consult pediatrician.",
      }

      setMedicineInfo(medicineData)

      // Save search to history in Supabase if user is logged in
      if (userId) {
        await saveSearchHistory(userId, searchQuery, "medicine")

        // Update local search history
        if (!searchHistory.includes(searchQuery)) {
          setSearchHistory((prev) => [searchQuery, ...prev].slice(0, 5))
        }
      }
    } catch (error) {
      console.error("Failed to fetch medicine information:", error instanceof Error ? error.message : String(error))
      setError("Failed to fetch medicine information. Please try again.")
      setMedicineInfo(null)
    } finally {
      setIsLoading(false)
    }
  }

  const handleLocationSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!locationInput.trim()) return

    setIsLocationSubmitting(true)

    try {
      // Save pharmacy search to history if user is logged in
      if (userId && medicineInfo) {
        await saveSearchHistory(userId, `${medicineInfo.name} at ${locationInput}`, "pharmacy")
      }

      // Navigate to pharmacy finder with medicine and location
      router.push(
        `/pharmacy-finder?medicine=${encodeURIComponent(medicineInfo?.name || "")}&location=${encodeURIComponent(locationInput)}`,
      )
    } catch (error) {
      console.error("Failed to process location:", error instanceof Error ? error.message : String(error))
      setError("Failed to process your location. Please try again.")
    } finally {
      setIsLocationSubmitting(false)
    }
  }

  const handleHistoryItemClick = (query: string) => {
    setSearchQuery(query)
    // Create a synthetic event to pass to handleSearch
    const syntheticEvent = {
      preventDefault: () => {},
    } as React.FormEvent
    handleSearch(syntheticEvent)
  }

  return (
    <div className="container mx-auto px-4 py-12 md:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl md:text-4xl font-bold">{t("medicineInformation")}</h1>
          <p className="mt-3 text-muted-foreground">{t("searchForMedicine")}</p>
        </div>

        <form onSubmit={handleSearch} className="flex w-full max-w-2xl mx-auto mb-8 gap-2">
          <Input
            type="text"
            placeholder={t("enterMedicineName")}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="flex-1"
          />
          <Button type="submit" disabled={isLoading}>
            {isLoading ? <LoadingSpinner /> : <Search className="h-4 w-4 mr-2" />}
            {t("search")}
          </Button>
        </form>

        {error && (
          <div className="bg-destructive/10 text-destructive px-4 py-3 rounded-md flex items-center mb-6">
            <AlertCircle className="h-5 w-5 mr-2" />
            <p>{typeof error === "string" ? error : "An error occurred"}</p>
          </div>
        )}

        <Tabs defaultValue="results" className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="results">Results</TabsTrigger>
            <TabsTrigger value="history">{t("recentSearches")}</TabsTrigger>
          </TabsList>

          <TabsContent value="results">
            {isLoading ? (
              <div className="flex justify-center items-center py-20">
                <LoadingSpinner size="lg" />
                <span className="ml-3 text-lg">{t("loading")}</span>
              </div>
            ) : medicineInfo ? (
              <div className="space-y-6">
                <Card>
                  <CardHeader>
                    <div className="flex items-center gap-3">
                      <div className="p-2 bg-primary/10 rounded-full">
                        <Pill className="h-6 w-6 text-primary" />
                      </div>
                      <div>
                        <CardTitle>{medicineInfo.name}</CardTitle>
                        <CardDescription>{medicineInfo.category}</CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead className="w-[200px]">Category</TableHead>
                          <TableHead>Information</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        <TableRow>
                          <TableCell className="font-medium">Uses</TableCell>
                          <TableCell>{medicineInfo.usage}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Side Effects</TableCell>
                          <TableCell>
                            {medicineInfo.sideEffects.length > 0 ? (
                              <ul className="list-disc pl-5">
                                {medicineInfo.sideEffects.map((effect, index) => (
                                  <li key={index}>{effect}</li>
                                ))}
                              </ul>
                            ) : (
                              "No known side effects"
                            )}
                          </TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Benefits</TableCell>
                          <TableCell>{medicineInfo.benefits}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Monitoring & Precautions</TableCell>
                          <TableCell>{medicineInfo.monitoring}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Medical History</TableCell>
                          <TableCell>{medicineInfo.medicalHistory}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Inhibitor Testing</TableCell>
                          <TableCell>{medicineInfo.inhibitorTesting}</TableCell>
                        </TableRow>
                        <TableRow>
                          <TableCell className="font-medium">Ages & Dosage</TableCell>
                          <TableCell>{medicineInfo.agesDosage}</TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-xl">{t("findPharmaciesNearYou")}</CardTitle>
                    <CardDescription>
                      Enter your location to find pharmacies that carry {medicineInfo.name}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleLocationSubmit} className="flex flex-col gap-4">
                      <div className="flex gap-2">
                        <div className="flex-1">
                          <Input
                            type="text"
                            placeholder={t("enterYourLocation")}
                            value={locationInput}
                            onChange={(e) => setLocationInput(e.target.value)}
                            required
                          />
                        </div>
                        <Button
                          type="submit"
                          disabled={isLocationSubmitting}
                          className="relative overflow-hidden group"
                        >
                          {isLocationSubmitting ? (
                            <LoadingSpinner />
                          ) : (
                            <>
                              <span className="flex items-center transition-transform duration-300 group-hover:translate-x-1">
                                <MapPin className="h-4 w-4 mr-2" />
                                {t("findPharmacies")}
                                <ArrowRight className="h-4 w-4 ml-2 opacity-0 -translate-x-2 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-0" />
                              </span>
                            </>
                          )}
                        </Button>
                      </div>
                    </form>
                  </CardContent>
                </Card>
              </div>
            ) : (
              <div className="text-center py-16 bg-muted/30 rounded-lg">
                <Search className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-xl font-medium mb-2">{t("noMedicineInfo")}</h3>
                <p className="text-muted-foreground">{t("searchForMedicine")}</p>
              </div>
            )}
          </TabsContent>

          <TabsContent value="history">
            <Card>
              <CardHeader>
                <CardTitle>{t("recentSearches")}</CardTitle>
                <CardDescription>Your recent medicine searches</CardDescription>
              </CardHeader>
              <CardContent>
                {searchHistory.length > 0 ? (
                  <ul className="space-y-2">
                    {searchHistory.map((query, index) => (
                      <li key={index}>
                        <Button
                          variant="ghost"
                          className="w-full justify-start text-left"
                          onClick={() => handleHistoryItemClick(query)}
                        >
                          <Clock className="h-4 w-4 mr-2" />
                          {query}
                        </Button>
                      </li>
                    ))}
                  </ul>
                ) : (
                  <div className="text-center py-8">
                    <p className="text-muted-foreground">{t("noSearchHistory")}</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}

